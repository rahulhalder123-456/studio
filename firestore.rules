
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for Admin role
    function isAdmin() {
      // In a production app, you would look up a user's role from a
      // 'roles' collection instead of a hardcoded list.
      let adminUIDs = [
        'ToBDMq0KVIgnLQCEeFzxLzB4HUj1',
        // Add other admin UIDs here
      ];
      return request.auth.uid in adminUIDs;
    }

    // --- User Profiles ---
    match /users/{userId} {
      // Any authenticated user can create their own profile
      allow create: if request.auth.uid == userId;
      // Users can only read or update their own profile
      allow read, update: if request.auth.uid == userId;
      // Admins can read any user's profile
      allow get: if isAdmin();
    }
    // Admins can list all user profiles
     match /users/{userId} {
      allow list: if isAdmin();
    }

    // --- Payment Methods (subcollection) ---
    match /users/{userId}/paymentMethods/{methodId} {
      // Users can manage their own payment methods
      allow read, create, delete: if request.auth.uid == userId;
    }

    // --- Projects ---
    match /projects/{projectId} {
      // An authenticated user's UID must match the 'userId' field in the new project document
      allow create: if request.auth.uid == request.resource.data.userId;
      // Any authenticated user can read any project
      allow read: if request.auth != null;
      // Only the project owner can update or delete their project
      allow update, delete: if request.auth.uid == resource.data.userId;
      // Admins can update or delete any project
      allow update, delete: if isAdmin();
    }
     // Admins can list all projects
    match /projects/{projectId} {
      allow list: if isAdmin();
    }


    // --- Chat ---
    match /chats/{chatId} {
      // Admins can read/write to any chat
      allow read, write: if isAdmin();
      // Users can access a chat if they are a participant
      allow read, write: if request.auth.uid in resource.data.participants;
    }

    match /chats/{chatId}/messages/{messageId} {
      function isChatParticipant() {
        return get(/databases/$(database)/documents/chats/$(chatId)).data.participants.hasAny([request.auth.uid]);
      }

      // Admins can read/create messages in any chat
      allow read, create: if isAdmin();
      // Users can read/create messages if they are a participant in the parent chat
      allow read, create: if isChatParticipant();
    }
  }
}
