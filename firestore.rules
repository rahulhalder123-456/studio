rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- User Profiles ---
    // Users can create their own profile and can only read/update their own.
    match /users/{userId} {
      allow read, update, create: if request.auth.uid == userId;
    }

    // --- Payment Methods ---
    // Users can manage their own payment methods.
    match /users/{userId}/paymentMethods/{methodId} {
      allow read, create, delete: if request.auth.uid == userId;
    }

    // --- Projects ---
    match /projects/{projectId} {
      // Any authenticated user can create a project.
      allow create: if request.auth != null;
      // Any authenticated user can read projects.
      allow read: if request.auth != null;
      // Only the user who created the project can update or delete it.
      allow update, delete: if request.auth.uid == resource.data.userId;
    }

    // --- Support Chats ---
    // Participants can read/write to their chat document.
    match /chats/{chatId} {
      allow read, write: if request.auth.uid in resource.data.participants;
    }

    // --- Chat Messages ---
    // Participants can read and create messages in their chat.
    match /chats/{chatId}/messages/{messageId} {
      allow read, create: if exists(/databases/$(database)/documents/chats/$(chatId)) &&
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
    }

    // --- Admin Rules (Optional) ---
    // To enable admin functionality, add a collection 'admins' with a document 'uids'.
    // In that document, create a map where keys are the admin UIDs.
    // e.g., admins/uids -> { "your-admin-uid": true }
    // Then, you can add `|| isAdmin()` to the rules above.
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/uids) &&
             request.auth.uid in get(/databases/$(database)/documents/admins/uids).data;
    }
  }
}
