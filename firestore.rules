
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Allow public read on featured projects for the homepage showcase
    match /featuredProjects/{projectId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Users can create/update their own profile
    match /users/{userId} {
      allow read, update, create: if request.auth != null && request.auth.uid == userId;
      allow list: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Users can manage their own payment methods
    match /users/{userId}/paymentMethods/{methodId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Projects can be created by any authenticated user.
    // They can only be read/updated by their owner or an admin.
    match /projects/{projectId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin(request.auth.uid));
      allow list: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // Chat messages can be read/written by participants. Admins can access all chats.
    match /chats/{chatId} {
       allow read, write: if request.auth != null && (request.auth.uid in resource.data.participants || isAdmin(request.auth.uid));
       
       match /messages/{messageId} {
         allow read, create: if request.auth != null && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants || isAdmin(request.auth.uid));
       }
    }
    
    // Reviews can be created by authenticated users for their own completed projects.
    // They can be read by anyone.
    match /reviews/{reviewId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if true;
    }

    // Helper function to check for admin UIDs
    function isAdmin(userId) {
      // ðŸ”´ IMPORTANT: Replace with your actual Firebase User ID (UID)
      return userId in [
        'ToBDMq0KVIgnLQCEeFzxLzB4HUj1'
      ];
    }
  }
}
