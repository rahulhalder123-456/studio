
rules_version = '2';

// Helper function to check if the user is an admin
function isAdmin() {
  // ðŸ”´ IMPORTANT: This list must be kept in sync with src/lib/admin.ts
  let adminUIDs = [
    'ToBDMq0KVIgnLQCEeFzxLzB4HUj1'
    // Add other admin UIDs here if needed
  ];
  return request.auth.uid in adminUIDs;
}

service cloud.firestore {
  match /databases/{database}/documents {

    // Allow users to manage their own profile data. Admins can read all profiles.
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
      allow read: if isAdmin();
      
      // Allow users to manage their own payment methods sub-collection.
      match /paymentMethods/{paymentId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Rules for projects collection.
    match /projects/{projectId} {
      allow create: if request.auth != null;
      allow read, update: if (request.auth != null && resource.data.userId == request.auth.uid) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Rules for featured work showcase.
    match /featuredProjects/{projectId} {
        allow read: if true;
        allow write, delete: if isAdmin();
    }
    
    // --- Rules for the Direct Messaging feature ---
    match /chats/{chatId} {
      // The chatId is expected to be 'support_{userId}'.
      // Allow read/write if the user's UID matches the one in the chatId, or if the user is an admin.
      allow read, write: if (request.auth != null && request.auth.uid == chatId.split('_')[1]) || isAdmin();

      // Rules for the messages sub-collection within a chat.
      match /messages/{messageId} {
        allow read, write: if (request.auth != null && request.auth.uid == chatId.split('_')[1]) || isAdmin();
      }
    }
  }
}
