
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin.
    // This is the most common point of failure. Ensure your Firebase UID
    // from the Firebase Authentication console is listed here.
    function isAdmin() {
      // ðŸ”´ ACTION REQUIRED: Replace with your actual Firebase Admin User IDs (UIDs)
      let adminUIDs = [
        'ToBDMq0KVIgnLQCEeFzxLzB4HUj1', // This is an example UID, replace it
        // 'ANOTHER_ADMIN_UID_HERE',
      ];
      return request.auth.uid in adminUIDs;
    }

    // Helper to check if a user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // ====== User Profiles (/users/{userId}) ======
    match /users/{userId} {
      // Admins can read any profile. A user can only read their own.
      allow read: if isAdmin() || (isAuthenticated() && request.auth.uid == userId);
      // A user can only create or update their own profile.
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // ====== Payment Methods (/users/{userId}/paymentMethods/{paymentId}) ======
    match /users/{userId}/paymentMethods/{paymentId} {
        // A user can only manage their own payment methods.
        allow read, write, delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // ====== Projects (/projects/{projectId}) ======
    match /projects/{projectId} {
      // Admins can read any project. Authenticated users can read projects they own.
      allow get: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
      
      // Allow list reads for authenticated users.
      // Client-side queries MUST be filtered (e.g., where('userId', '==', auth.uid))
      // for this rule to grant access. This rule will block any broad queries.
      allow list: if isAuthenticated();

      // Authenticated users can create a project, but must set themselves as the owner.
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      
      // Admins can update any project. A user who owns the project can also update it.
      allow update: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
    }
    
    // ====== Time Entries (/projects/{projectId}/timeEntries/{entryId}) ======
    match /projects/{projectId}/timeEntries/{entryId} {
        // The project owner and admins can read time entries.
        function isProjectOwner() {
          return isAuthenticated() && get(/databases/$(database)/documents/projects/$(projectId)).data.userId == request.auth.uid;
        }
        allow read: if isAdmin() || isProjectOwner();
        
        // Only admins can create, update, or delete time entries.
        allow write: if isAdmin();
    }

    // ====== Chat System (/chats/{chatId}) ======
    match /chats/{chatId} {
      // Admins can access any chat document. A user can only access their own.
      // `request.auth.uid in chatId` works because chat IDs are `support_{userId}`
      allow get, list, write: if isAdmin() || (isAuthenticated() && request.auth.uid in chatId);
    }
    
    // ====== Chat Messages (/chats/{chatId}/messages/{messageId}) ======
    match /chats/{chatId}/messages/{messageId} {
      // Admins can read any message. Users can only read messages in their own chat.
      allow read: if isAdmin() || (isAuthenticated() && request.auth.uid in chatId);

      // An admin can create a message if senderId is 'support-admin'.
      // A user can create a message in their own chat if senderId is their UID.
      allow create: if (isAdmin() && request.resource.data.senderId == 'support-admin') ||
                       (isAuthenticated() && request.auth.uid in chatId && request.resource.data.senderId == request.auth.uid);
                       
      // Disallow updates and deletes to preserve chat history.
      allow update, delete: if false;
    }

    // ====== Featured Work Showcase (/featuredProjects/{projectId}) ======
    match /featuredProjects/{projectId} {
      // Anyone can read featured projects for the homepage.
      allow read: if true;
      // Only admins can create, update, or delete featured projects.
      allow write: if isAdmin();
    }

    // ====== Reviews (/reviews/{reviewId}) ======
    match /reviews/{reviewId} {
        // Anyone can read reviews for the testimonials section.
        allow read: if true;
        // A user can only create a review if they are the author.
        allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
        // An admin or the author can delete a review.
        allow delete: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
        // Disallow updates to prevent tampering.
        allow update: if false;
    }
  }
}
