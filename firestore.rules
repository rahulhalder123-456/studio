rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    // Checks if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Checks if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Checks if the user is an administrator
    function isAdmin() {
      /**
       * -----------------------------------------------------------------------
       * ðŸ”´ ADMIN MANAGEMENT FOR DATABASE RULES ðŸ”´
       * -----------------------------------------------------------------------
       * This function controls which users have admin rights for database access.
       *
       * To add a new admin:
       * 1. Find the user's UID in your Firebase Console (Authentication > Users).
       * 2. Add the UID to the list below, inside the square brackets.
       *    - UIDs must be in single quotes ''.
       *    - UIDs must be separated by a comma.
       *
       * Example: return request.auth.uid in ['uid-of-first-admin', 'uid-of-second-admin'];
       */
      return request.auth.uid in [
        'ToBDMq0KVIgnLQCEeFzxLzB4HUj1', // This is a placeholder for the initial admin
        // 'ADD_YOUR_NEW_ADMIN_UID_HERE'
      ];
    }

    // --- Profile Rules (users collection) ---
    match /users/{userId} {
      // Admins can read any user's profile
      // Any authenticated user can read their own profile
      allow read: if isAdmin() || isOwner(userId);
      
      // An authenticated user can create or update their own profile
      allow write: if isOwner(userId);

      // --- Nested Collections ---
      // Payment Methods: Only the owner can manage their payment methods
      match /paymentMethods/{paymentMethodId} {
        allow read, write, delete: if isOwner(userId);
      }
    }

    // --- Projects Rules ---
    match /projects/{projectId} {
      // Read Access:
      // - The project owner can read it.
      // - Any admin can read it.
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      
      // Create Access:
      // - Any authenticated user can create a project, as long as they set themselves as the userId.
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);

      // Update Access:
      // - The project owner can update their own project.
      // - An admin can update any project.
      allow update: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      
      // Delete Access:
      // - Disallow deletes for now to prevent accidental data loss.
      allow delete: if false;

      // Nested Time Entries
      match /timeEntries/{timeEntryId} {
        // Admins can log time. Owners can view it.
        allow read, write: if isAdmin();
      }
    }

    // --- Featured Projects Rules (for homepage showcase) ---
    match /featuredProjects/{projectId} {
        // Anyone can read featured projects
        allow read: if true;
        // Only admins can add, update, or delete them
        allow write: if isAdmin();
    }
    
    // --- Reviews Rules ---
    match /reviews/{reviewId} {
        // Anyone can read reviews
        allow read: if true;
        // Only the user who wrote it can create it.
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        // Disallow updates and deletes for now.
        allow update, delete: if false;
    }
    
    // --- Chat Rules ---
    match /chats/{chatId} {
      // Chat room documents can be created or updated if the user is a participant.
      // This is primarily for updating the `lastMessageAt` timestamp.
      allow write: if isAuthenticated() && (isOwner(chatId.split('_')[1]) || isAdmin());
      // Reading the chat document itself isn't needed by clients.
      allow read: if isAdmin();

      // Messages subcollection
      match /messages/{messageId} {
        // Users can create messages in their own chat channel.
        // Admins can create messages in any chat channel.
        allow create: if isAuthenticated() && (isOwner(chatId.split('_')[1]) || isAdmin());
        
        // Users can read messages in their own chat channel.
        // Admins can read messages in any chat channel.
        allow read: if isAuthenticated() && (isOwner(chatId.split('_')[1]) || isAdmin());

        // Disallow updates and deletes for message history integrity.
        allow update, delete: if false;
      }
    }
  }
}
